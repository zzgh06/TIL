// 다른 파일에 있는 내용 가져오고 싶을 땐
// @use '파일경로';
// @import와 마찬가지로 맨위에 상담에 작성되어야 함
// 다른 파일에 종속되기 위한 서브 파일(공통 적용 사항)은 컴파일할 이유가 없기 때문에
// 컴파일하기 싫은 파일은 _파일명.scss로 작명할 것
@use 'reset';

// 변수 만들려면 $변수명 : 저장해서 쓸값;
$main-color : #2a4cb2;
$sub-color : #eeeeee;
$basic-size : 16px;

// SASS에선 사칙연산 바로가능
// (+ -는 같은 단위끼리, * /은 정수로)
.background {
  background-color: $main-color;
  font-size: ($basic-size - 2px);
  font-size: ($basic-size * 2);
}

.box {
  color: $sub-color;
  font-size: ($basic-size + 2px);
}

// ------------------------------------------------------------------

.main-bg h4 {
  font-size: 16px;
}

.main-bg button {
  color: red;
}

// nesting 문법
// 아래의 nesting 문법으로 작성된 코드는 .main-bg h4 { } 와 동일
// 혹은 문법 안에 button를 추가 하면 .main-bg h4 { } 와 .main-bg button { }이 동시에 생성됨
// 그렇기 때문에 관련있는 class들 묶을 때, nesting 문법을 사용하면 용이
// nesting 안에 또 nesting 할 수 있지만 코드가 복잡해지기 때문에 2개 이상 중첩하지 않는게 좋다. 
.main-bg {
  width: 100px;
  h4 {
    font-size: 16px;
  }
  button {
    color: red;
  }
}

// ----------------------------------------------------------
// @extend 문법 : class 전체를 복사해주는 @extend 문법

// 가정 : 빨간, 파란, 초록 버튼이 필요하다
// .btn-green {
//   width: 100px;
//   height: 100px;
//   padding: 20px;
//   color: green;
// }
// .btn-red {
//   width: 100px;
//   height: 100px;
//   padding: 20px;
//   color: red;
// }
// .btn-blue {
//   width: 100px;
//   height: 100px;
//   padding: 20px;
//   color: blue;
// }
// 고통된 부분을 따로 빼내어 필요할때 마다 사용하고 싶을때 @extend 문법 사용 
// %임시클래스명으로 고통된 부분을 클래스로 지정해주고
%btn {
  width: 100px;
  height: 100px;
  padding: 20px;
}

// @extend %btn; 이런 식으로 사용하고자 하는 클래스 안에 작성해주면 된다
.btn-green {
  @extend %btn;
  color: green;
}
.btn-red {
  @extend %btn;
  color: red;
}
.btn-blue {
  @extend %btn;
  color: blue;
}

// 숙제
// %div {
//   width: 200px;
//   height: 200px;
//   padding: 20px;
// }

// .div-green {
//   @extend %div;
//   background: green;
// }

// .div-red {
//   @extend %div;
//   background: red;
// }

// .div-blue {
//   @extend %div;
//   background: blue;
// }

// @mixin 문법 : 긴 코드를 짧은 단어로 축약할 때 사용

// 작명() 으로 축약해준다
// @mixin 문법의 $파라미터 긴 코드를 가변적으로 만들 때 사용
// @mixin 작명($파라미터, $파라미터2) 처럼 안에 파라미터 값을 여러개를 두고 사용가능
@mixin 작명($파라미터) {
  // 안에 있는 코드를
  font-size: $파라미터;
  letter-spacing: -1px;
  // letter-spacing: $파라미터2;
  // #{ $파라미터2 }: -1px;
  // 글자 중간에 $변수나 $파라미터 넣을 땐, #{$변수명}
}

h2 {
  @include 작명(40px);
}

h3 {
  @include 작명(30px);
  // 다른 파일의 $변수를 쓰려면 파일명.$변수
  // 다른 파일의 @mixin 쓰려면 @include 파일명.mixin이름
  color: reset.$메인칼라;
}

h4 {
  font-size: 10px;
  letter-spacing: -1px;
}


// 숙제 1. 리스트 만들기
$active-text-color: White;
$active-color: blue;

.li-style {
  >li {
    list-style: none;
    width: 50%;
    padding: 20px;
    border: 1px solid lightgrey;
  } 
  li:hover {
    background: $active-color;
    color: $active-text-color;
  }
}

// 숙제 2. alert 박스 만들기
%alert-box {
  padding: 20px;
  border: 1px solid #eee;
  border-radius: 5px;
}

.alert-box-green {
  @extend %alert-box;
  background-color: lightgreen;
}

.alert-box-blue {
  @extend %alert-box;
  background-color: lightblue;
}

.alert-box-yellow {
  @extend %alert-box;
  background-color: lightyellow;
}


// 3. column 레이아웃 만들기 
@mixin column ($size) {
  width: $size;
  float: left;
  height: 50px;
  margin-bottom: 10px;
  padding: 10px 15px;
  border: 1px solid lightskyblue;
  background-color: lightgrey;
  text-align: center;
}

.row {
  margin-left: 50px;
  margin-right: 50px;
}

.col-6 {
  @include column(50%);
}

.col-4 {
  @include column(33.33%);
}

.col-3 {
  @include column(25%);
}