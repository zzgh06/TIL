# 1. 신용카드 만들기 1
# 신용카드 번호는 룬 공식(LUHN Formula)을 만족해야합니다.
# 룬 공식이란 카드 번호에서 마지막 자리(열여섯번째) 숫자N을 구하는 공식입니다.

# 1) 매 홀수자리의 숫자마다 2를 곱해서 더합니다. 
# 2) 매 짝수자리의 숫자는 그대로 더합니다.
# 3) 1)과 2)를 더 한 숫자에 N을 더 한 숫자가 10으로 나눴을 때 나눠 떨어지면 유효한 숫자입니다.

# T = int(input())

# for t in range(1, T+1):
#     numbers = list(map(int, input().split()))
#     total = 0
#     # 홀수, 짝수 구분하여 total 변수에 더함
#     for n in range(0, len(numbers)):
#         if (n + 1) % 2 == 1:
#             total += numbers[n] * 2
#         else:
#             total += numbers[n]
#     # 나열된 정수 중 홀수 번째에 2를 곱하여 더한 값과, 짝수 번째를 더한 값을
#     # 10으로 나눴을 때 나머지가 0일 경우 0을 출력하고
#     # 아닐 경우 10에서 나머지 값을 빼준 값을 출력한다 
#     if total % 10 == 0:
#         print(f'#{t} 0')
#     else:
#         print(f'#{t} {10 - total % 10}')

# 2. 신용카드 만들기 2
# 신용 카드를 만들려면 아래 두 가지의 조건을 모두 만족해야 한다.

# 1. 카드 번호는 3, 4, 5, 6, 9 로 시작해야 한다.
# 2. 카드 번호에 "-"이 들어갈 수 있으며 "-" 를 제외한 숫자의 개수는 16개이다.
# EX) 6471-6836-9525-5276
# EX) 3029192045012901

# 카드 번호가 주어졌을 때 해당 번호로 신용카드를 만들 수 있는지 판별하는 프로그램을 작성하시오.

# T = int(input())

# for t in range(1, T+1):
#     card = input()
#     start_number = ['3', '4', '5', '6', '9']
#     # 입력된 카드번호 문자열의 인덱스 0번째 위치한 숫자가 start_number 리스트에 담긴 문자열
#     # 그리고 '-'를 제외한 문자열의 길이가 16인 경우 '1'를 출력하고, 아닐 경우 '0'을 출력
#     if card[0] in start_number and len(card.replace('-', '')) == 16:
#         print(f'#{t} 1')
#     else:
#         print(f'#{t} 0')